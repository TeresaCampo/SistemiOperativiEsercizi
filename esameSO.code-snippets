{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:

	"Includo lib principali":{
		"prefix": "includoMainLib",
		"body": [
			"#include <unistd.h>",
			"#include <stdlib.h>",
			"#include <fcntl.h>",
			"#include <stdio.h>",
			"#include <sys/wait.h>"		
		],
		"description": "Includo le librerie principali"
	},
	
	"Scrivo variabili locali":{
		"prefix": "variabiliLocali",
		"body": [
			"\t/*-------------*variabili locali-------------*/",
			"$1",
			"typedef int pipe_t[2];",
			"pipe_t *piped/*sistema*/;",
			"int nr, nw;                     //per controllare lettura e scrittura pipe",
			"int pidFiglio, status, ritorno; //per fork e wait",
			"\t/*-------------------------------------------*/"
		],
		"description": "Intestazione variabili locali."
	},

	"Controllo nuemro di parametri":{
		"prefix": "controlloParametri",
		"body": [
			"if(argc<$1){",
			"\tprintf(\"Errore: passati %d parametri, ma $2\\n\", argc-1);",
			"\texit (1);",
			"}",
			"$3=argc-1;"		
		],
		"description": "Controllo il numero di parametri passati"
	},
	
	"Alloco spazio per una pipe":{
		"prefix": "allocoPipe",
		"body": [
			"piped$1= (pipe_t*) malloc($2*sizeof(pipe_t));",
			"if(piped$1==NULL){",
			"\tprintf(\"Errore: problemi nell'allocazione di memoria per le pipe piped$1\\n\");",
			"\texit ($3);",
			"}"					
		],
		"description": "Alloco spazio per una pipe."
	},

	"Creo array di pipe":{
		"prefix": "creoArrayPipe",
		"body": [
			"for(int $1=0; $1<$2; ++$1){",
			"\t if(pipe(piped$3[i])<0){",
			"\t\tprintf(\"Errore: problemi nella creazione della pipe piped$3\\n\");",
			"\t\texit ($4);",
			"\t}",
			"}"
		],
		"description": "Creo array di pipe."
	},

	"Padre crea N figli":{
		"prefix": "creaoNFigli",
		"body": [
			"printf(\"DEBUG-Sono il processo padre con pid %d e sto per creare %d figli\\n\", getpid(), $2);",
			"for(int $1=0; $1<$2; ++$1){",
			"\tpidFiglio=fork();",
			"\tif(pidFiglio<0){",
			"\t\t printf(\"Errore nella fork\\n\");",
			"\t\t exit ($3);",
			"\t}",
			"\t if(pidFiglio==0){",
			"\t\tprintf(\"DEBUG-Sono il processo figlio con pid %d\\n\", getpid());",
			"\t\t $4 //chiudo pipe, faccio cose, comunico e exit (ritorno)",
			"\t}",
			"}"
		],
		"description": "Processo padre crea N(da inserire) figli."
	},

	"Chiudo le pipe":{
		"prefix": "chiudoPipe",
		"body": [
			"for(int j=0; j<$1; ++j){",
			"\tclose(/*sistema*/);",
			"\tif(j!=$2){",
			"\t\t close(/*sistema*/);", 
			"\t}",
			"}"		
		],
		"description": "Chiudo le pipe."
	},

	"Apro il file":{
		"prefix": "aproFile",
		"body": [
			"if(($1=open(argv[$2], ${3|O_RDONLY, O_WRONLY, O_RDWR|}))<0){",
			"printf(\"Errore: impossibile aprire in lettura e scrittura il file %s\\n\", argv[$2]);",
			"exit (-1);",
			"}"
		],
		"description": "Provo a ad aprire in modalitÃ  $3 un file."
	},

	"Leggo da pipe":{
		"prefix": "readPipe",
		"body": [
			"nr=read(piped$1[$2][0], &$3, sizeof($3));",
			"if(nr!=sizeof($3)){",
			"\tprintf(\"Errore: il $4 non riesce a leggere dalla pipe piped$1\\n\");",
			"\texit ($5);",
			"}"	
		],
		"description": "Leggo da una pipe e controllo."
	},
	
	"Scrive su pipe":{
		"prefix": "writePipe",
		"body": [
			"nw=write(piped$1[$2][1], &$3, sizeof($3));",
			"if(nw!=sizeof($3)){",
			"\t printf(\"Errore: il $4 non riesce a scrivere sulla pipe piped$1\\n\");",
			"exit ($5);",
			"}"	
		],
		"description": "Scrivo su una pipe e controllo."
	},

	"Aspetto tutti i figli":{
		"prefix": "aspettoFigli",
		"body": [
			"//il padre aspetta tutti i processi figli",
			"for(int $1=0; $1<$2; ++$1){",
			"\t if ((pidFiglio=wait(&status)) < 0){",
			"\t\t printf(\"Errore wait\\n\");",
			"\t\t exit($3);",
			"\t}",
			"\t if ((status & 0xFF) != 0){",
			"\t\t printf(\"Figlio con pid %d terminato in modo anomalo\\n\", pidFiglio);}",
			"\t else{",
			"\t\t ritorno=(int)((status >> 8) & 0xFF);",
			"\t\t printf(\"Il figlio con pid=%d ha ritornato %d (se 255 problemi!)\\n\", pidFiglio, ritorno);",
			"\t }",
			"}",
			"exit (0);"	
		],
		"description": "Aspetto tutti i figli e termino programma."
	},

	
	
	
}